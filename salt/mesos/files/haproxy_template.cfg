# https://gist.github.com/GABeech/eb88933bf49cd82ceab0

global
  log /dev/log   local7 info
  chroot /var/lib/haproxy
  stats socket /run/haproxy/admin.sock mode 660 level admin
  stats timeout 30s
  user haproxy
  group haproxy
  daemon

  ssl-default-bind-options no-sslv3 no-tls-tickets force-tlsv12
  ssl-default-bind-ciphers AES128+EECDH:AES128+EDH
  tune.ssl.default-dh-param 1024

defaults
  log            global
  mode           http
  option         httplog
  option         dontlognull
  option         forwardfor
  option         http-server-close
  option         http-pretend-keepalive
  option         redispatch
  option         abortonclose
  option         tcp-smart-accept
  option         tcp-smart-connect 

  retries             3
  maxconn          40000
  timeout connect  5000
  timeout client  50000
  timeout server  50000

  compression algo gzip
  compression type text/html text/plain text/css

  errorfile 400 /etc/haproxy/errors/400.http
  errorfile 403 /etc/haproxy/errors/403.http
  errorfile 408 /etc/haproxy/errors/408.http
  errorfile 500 /etc/haproxy/errors/500.http
  errorfile 502 /etc/haproxy/errors/502.http
  errorfile 503 /etc/haproxy/errors/503.http
  errorfile 504 /etc/haproxy/errors/504.http

frontend http-in
  bind *:80
  bind *:443 ssl crt /etc/ssl/private/opw.pem

  stats enable
  stats auth admin:admin
  stats uri /haproxy

  # define acls
  {{ $services := .Services }}
  {{ range $index, $app := .Apps }} {{ if $app.Env.BAMBOO_DOMAIN }} {{ $service := getService $services $app.Id }} 
  acl {{ $app.EscapedId }}-aclrule-domain hdr(host) -i {{ $app.Env.BAMBOO_DOMAIN }} {{ if $app.Env.BAMBOO_PATH }}
  acl {{ $app.EscapedId }}-aclrule-path  path_beg {{ $app.Env.BAMBOO_PATH }} {{ end }} {{ end }} {{ end }}

  capture request header origin len 128
    http-response add-header Access-Control-Allow-Origin %[capture.req.hdr(0)] if { capture.req.hdr(0) -m found }
    rspadd Access-Control-Allow-Headers:\ Origin,\ X-Requested-With,\ Content-Type,\ Accept  if { capture.req.hdr(0) -m found }

  http-request  set-header           X-Forwarded-For   %[src]
  reqadd        X-Forwarded-Proto:\ https        if { ssl_fc }
  redirect      scheme https         if !{ ssl_fc }

  # define routes
  {{ $services := .Services }}
  {{ range $index, $app := .Apps }} {{ if $app.Env.BAMBOO_DOMAIN }} {{ $service := getService $services $app.Id }} {{ if $app.Env.BAMBOO_PATH }}
  use_backend {{ $app.EscapedId }}-cluster if {{ $app.EscapedId }}-aclrule-domain {{ $app.EscapedId }}-aclrule-path {{ end }} {{ end }} {{ end }}
  {{ $services := .Services }}
  {{ range $index, $app := .Apps }} {{ if $app.Env.BAMBOO_DOMAIN }} {{ $service := getService $services $app.Id }} {{ if not $app.Env.BAMBOO_PATH }}
  use_backend {{ $app.EscapedId }}-cluster if {{ $app.EscapedId }}-aclrule-domain {{ end }} {{ end }} {{ end }}

  # define backends
  {{ range $index, $app := .Apps }} {{ if $app.Env.BAMBOO_DOMAIN }} 
  backend {{ $app.EscapedId }}-cluster
    {{ if $app.HealthCheckPath }}
    #option httpchk GET {{ $app.HealthCheckPath }} {{ end }}
    {{ if $app.Env.BAMBOO_WHITELIST }}
    acl white_list src {{ $app.Env.BAMBOO_WHITELIST }}
    http-request allow if white_list
    http-request deny {{ end }}
    balance leastconn
    option httpclose
    option forwardfor
    cookie JSESSIONID prefix {{ range $page, $task := .Tasks }}
      server {{ $app.EscapedId}}-{{ $task.Host }}-{{ $task.Port }} {{ $task.Host }}:{{ $task.Port }} {{ if $app.HealthCheckPath }} check inter 30000 {{ end }} {{ end }}
  {{ end }} {{ end }}

# marathon ports
{{ range $index, $app := .Apps }}
  {{ range $serviceIndex, $servicePort := $app.ServicePorts }} {{ if eq ( $app.Env.BAMBOO_NEEDS_PORT | html ) "1" }}
listen {{ $app.EscapedId }}_{{ $servicePort }}
  bind *:{{ $servicePort }}
  mode tcp
  option tcplog
  balance leastconn
        {{ range $page, $task := $app.Tasks }}
        server {{ $app.EscapedId }}-{{ $task.Host }}-{{ index $task.Ports $serviceIndex }} {{ $task.Host }}:{{ index $task.Ports $serviceIndex }} {{ if $app.HealthCheckPath }} check inter 30000 {{ end }} {{ end }}
  {{ end }}{{ end }}
{{ end }}




